@page "/"
@using System

<PageTitle>Counter</PageTitle>

<div id="UIArea"  style="margin-left: 0.5em; margin-top: 2.5em; margin-right: 0.5em;"></div>
<h1>WebGL Demo</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me!</button>


<div id="GameArea" style="margin-left: 0.5em; margin-top: 2.5em; margin-right: 0.5em ;
padding: 2em 2em 2em 2em;border-width: 2px; border-color: black; border-style:solid;">
    <BECanvas Width="500" Height="500" @ref="_canvasReference"></BECanvas>
</div>


@code {
    private int currentCount = 0;
    private WebGLContext _context;
    protected BECanvasComponent _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateWebGLAsync();
    
        await this._context.ClearColorAsync(1, 0, 0, 1);
        await this._context.ClearAsync(BufferBits.COLOR_BUFFER_BIT);
    }

    private void IncrementCount()
    {
        currentCount++;
        Console.WriteLine($"El valor del contador ahora es {currentCount}");
    }

    private static readonly float[] cubeVertices =  {
        -1.0f,-1.0f,-1.0f,
        -1.0f,1.0f,-1.0f,
        1.0f,1.0f,-1.0f,
        1.0f,-1.0f,-1.0f,
        -1.0f,-1.0f,1.0f,
        -1.0f,1.0f,1.0f,
        1.0f,1.0f,1.0f,
        1.0f,-1.0f,1.0f
    };

    private static readonly int[] intCubeIndices =  {
        2,1,0,
        3,2,0,
        6,2,3,
        7,6,3,
        1,4,0,
        5,4,1,
        5,7,4,
        6,7,5,
        2,5,1,
        2,6,5,
        4,3,0,
        7,3,2
    };
    
    private float[] cubeColors= new [] {
        1.0f,0.0f,0.0f,1.0f,
        1.0f,0.0f,0.0f,1.0f,
        1.0f,0.0f,0.0f,1.0f,
        1.0f,0.0f,0.0f,1.0f,
        0.0f,1.0f,0.0f,1.0f,
        0.0f,1.0f,0.0f,1.0f,
        0.0f,1.0f,0.0f,1.0f,
        0.0f,1.0f,0.0f,1.0f
    };

    private static readonly ushort[] cubeIndices = Array.ConvertAll(intCubeIndices, val=>checked((ushort) val));

    private const string vsSource=@"
uniform mat4 uModelViewMatrix;
uniform mat4 uProjectionMatrix;
attribute vec3 aVertexPosition;
attribute vec4 aVertexColor;
varying vec4 vVertexPosition;
varying vec4 vVertexColor;
void main(void){
vVertexPosition = uProjectionMatrix*uModelViewMatrix*vec4(0.5*aVertexPosition,1.0);
vVertexColor=aVertexColor;
gl_Position = vVertexPosition;
}";

private const string fsSource=@"
precision mediump float;
varying vec4 vVertexColor;
void main(){
gl_FragColor=vVertexColor;
}"; 

private WebGLShader vertexShader;
private WebGLShader fragmentShader;
private WebGLProgram program;








}

